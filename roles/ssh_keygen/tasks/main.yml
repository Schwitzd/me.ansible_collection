---
- name: Ensure the .ssh directory exists
  ansible.builtin.file:
    path: "/home/{{ ansible_user_id }}/.ssh"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: '0700'

- name: Check if SSH key exists
  ansible.builtin.stat:
    path: "/home/{{ ansible_user_id }}/.ssh/{{ ssh_key_name }}"
  register: ssh_key_present

- name: Generate random passphrase if encryption is enabled
  ansible.builtin.set_fact:
    ssh_key_passphrase: "{{ lookup('password', '/dev/null length=32') }}"
  when: ssh_keygen_encrypt_private_key

- name: Generate SSH key pair if it does not exist
  community.crypto.openssh_keypair:
    path: "/home/{{ ansible_user_id }}/.ssh/{{ ssh_key_name }}"
    type: ed25519
    passphrase: "{{ ssh_key_passphrase if ssh_keygen_encrypt_private_key else omit }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: "0600"
  when: not ssh_key_present.stat.exists
  register: ssh_key_result

- name: Ensure the public key has correct permissions
  ansible.builtin.file:
    path: "/home/{{ ansible_user_id }}/.ssh/{{ ssh_key_name }}.pub"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: '0644'
  when: ssh_key_present.stat.exists

- name: Copy public SSH key to remote server
  ansible.posix.authorized_key:
    user: "{{ ssh_user }}"
    state: present
    key: "{{ lookup('file', '/home/{{ ansible_user_id }}/.ssh/{{ ssh_key_name }}.pub') }}"
  delegate_to: "{{ ssh_server }}"
  when: copy_ssh_key

- name: Store SSH key passphrase locally (only if encryption is enabled)
  ansible.builtin.copy:
    content: "{{ ssh_key_passphrase }}"
    dest: "/tmp/{{ ssh_key_name }}_passphrase.txt"
    mode: "0600"
  when: ssh_keygen_encrypt_private_key
  delegate_to: localhost
